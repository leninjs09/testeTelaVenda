unit PedidoVendaModel;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Phys, FireDAC.Phys.MySQLDef, FireDAC.Stan.Param, FireDAC.DatS,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB, System.UITypes,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, FireDAC.Phys.MySQL,
  FireDAC.Stan.Pool, FireDAC.VCLUI.Wait, inifiles, Winapi.Windows,
  Winapi.Messages, System.Variants, Vcl.Forms, cliente, pedido_produto,
  pedido, produto, Datasnap.DBClient, vcl.Dialogs, vcl.Controls;

type
  TFPedidosVendaModel = class(TDataModule)
    tbPedidoProdutos: TFDMemTable;
    tbPedidoProdutosCodProduto: TIntegerField;
    tbPedidoProdutosDescricao: TStringField;
    tbPedidoProdutosQuantidade: TFloatField;
    tbPedidoProdutosPrecoUnitario: TCurrencyField;
    tbPedidoProdutosTotal: TCurrencyField;
    tbPedidoProdutosCodigoCliente: TIntegerField;
    dsPedidoProdutos: TDataSource;
    procedure DataModuleCreate(Sender: TObject);
  private
    { Private declarations }
  public
    function CarregarPedido: boolean;
    procedure AdicionarProduto(pCodigoProduto, pCodigoCliente : integer; pQuantidade, pPrecoUnitario : real);
    function CalcularTotalPedido: Real;
    procedure ApagarProdutoPedido;
    function GravarPedido(): boolean;
    function ApagarPedido: boolean;
  end;

var
  FPedidosVendaModel: TFPedidosVendaModel;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

uses dm, produto, cliente;

{$R *.dfm}

{ TFPedidosVendaModel }

procedure TFPedidosVendaModel.AdicionarProduto(pCodigoProduto,
  pCodigoCliente: integer; pQuantidade, pPrecoUnitario: real);
var
  Produto : TProduto;
begin

  Produto := TProduto.Create(DataModuleConexao.conexao);
  produto.Pesquisar(pcodigoProduto.ToString);

  tbPedidoProdutos.append;
  tbPedidoProdutosCodProduto.AsInteger := Produto.Codigo;
  tbPedidoProdutosDescricao.asstring := Produto.Descricao;
  tbPedidoProdutosQuantidade.AsFloat := pQuantidade;
  tbPedidoProdutosCodigoCliente.AsInteger := pCodigoCliente;
  tbPedidoProdutosPrecoUnitario.Value := pPrecoUnitario;
  tbPedidoProdutosTotal.Value := tbPedidoProdutosQuantidade.Value * tbPedidoProdutosPrecoUnitario.Value;
  tbPedidoProdutos.post;

end;

function TFPedidosVendaModel.ApagarPedido: boolean;
var
  InputString: string;
  Pedido : TPedido;
  PedidoProduto : TPedidoProduto;
  Qy : TFdQuery;
begin
  result := false;
  InputString := InputBox('Informe o número do pedido', 'Pedido:', '');

  if InputString <> '' then
  begin
    DataModuleConexao.conexao.StartTransaction;
    Pedido := TPedido.Create(DataModuleConexao.conexao);
    PedidoProduto := TPedidoProduto.Create(DataModuleConexao.conexao);
    Qy := TFDQuery.Create(nil);
    try
      try
        Qy.Connection := DataModuleConexao.conexao;
        qy.SQL.Text := 'select pp.autoincrem ' +
                       ' from pedidos_produtos pp ' +
                       ' where pp.numero_pedido = :numero_pedido';
        qy.ParamByName('numero_pedido').AsString := InputString;
        qy.Open();

        qy.First;
        while not qy.Eof do
        begin

          PedidoProduto.Pesquisar(Qy.FieldByName('autoincrem').AsString);
          PedidoProduto.Apagar;

          qy.Next;
        end;

        Pedido.Pesquisar(InputString);
        Pedido.Apagar;

        result := true;
        DataModuleConexao.conexao.Commit;
        MessageDlg('Pedido ' + InputString + ' apagado com sucesso.', TMsgDlgType.mtInformation, [mbOk],0);

      except
        on e: Exception do
        begin
          DataModuleConexao.conexao.Rollback;
          MessageDlg('Erro ao apagar pedido' + #13 + 'Erro:' + e.Message, mtError, [mbOk],0);
        end;
      end;

    finally
      FreeAndNil(Qy);
      FreeAndNil(Pedido);
      FreeAndNil(PedidoProduto);
    end;
  end;
end;

procedure TFPedidosVendaModel.ApagarProdutoPedido;
begin

  if MessageDlg('Deseja apagar o registro selecionado?',
  mtConfirmation, [mbYes, mbNo], 0, mbYes) = mrYes then
  begin

    if not tbPedidoProdutos.IsEmpty then
      tbPedidoProdutos.Delete;

  end;

end;

function TFPedidosVendaModel.CalcularTotalPedido: Real;
var
  tb : TFDMemTable;
  Total : real;
begin

  tb := TFDMemTable.Create(nil);
  tb.Data := tbPedidoProdutos.Data;

  total := 0;
  tb.First;
  while not tb.eof do
  begin
    total := total + tb.FieldByName('total').AsFloat;
    tb.Next;
  end;

  result := total;

end;

function TFPedidosVendaModel.CarregarPedido: boolean;
var
  InputString: string;
  Qy : TFdQuery;
begin
  result := false;
  InputString := InputBox('Informe o número do pedido', 'Pedido:', '');

  if InputString <> '' then
  begin
    result := true;

    Qy := TFDQuery.Create(nil);
    try
      qy.Connection := DataModuleConexao.conexao;
      qy.SQL.Add('select');
      qy.SQL.Add('p.numero_pedido,');
      qy.SQL.Add('p.data_emissao,');
      qy.SQL.Add('p.codigo_cliente,');
      qy.SQL.Add('p.valor_total,');
      qy.SQL.Add('pp.autoincrem,');
      qy.SQL.Add('pp.codigo_produto,');
      qy.SQL.Add('pp.quantidade,');
      qy.SQL.Add('pp.valor_unitario,');
      qy.SQL.Add('pp.valor_total as valorProduto');
      qy.SQL.Add('from pedidos p');
      qy.SQL.Add('join pedidos_produtos pp on pp.numero_pedido = p.numero_pedido');
      qy.SQL.Add('where p.numero_pedido = :numero_pedido');
      qy.ParamByName('numero_pedido').AsString := InputString;
      qy.Open();

      if not tbPedidoProdutos.IsEmpty then
        tbPedidoProdutos.EmptyDataSet;

      qy.First;
      while not qy.Eof do
      begin
        AdicionarProduto(qy.FieldByName('codigo_produto').AsInteger, qy.FieldByName('codigo_cliente').AsInteger,
          qy.FieldByName('quantidade').AsFloat, qy.FieldByName('valor_unitario').AsFloat);
        qy.Next;
      end;

    finally
      FreeAndNil(Qy);
    end;
  end;

end;

procedure TFPedidosVendaModel.DataModuleCreate(Sender: TObject);
begin
  tbPedidoProdutos.CreateDataSet;
end;

function TFPedidosVendaModel.GravarPedido: boolean;
begin

end;

end.
